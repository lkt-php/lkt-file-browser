<?php  namespace Lkt\WebPages\Generated; use Lkt\QueryBuilding\Where; use Lkt\QueryBuilding\Query; use Lkt\Factory\Instantiator\Instantiator; class GeneratedLktFileEntity extends \Lkt\Factory\Instantiator\Instances\AbstractInstance { const GENERATED_TYPE = 'lkt-file-entity'; const COMPONENT = 'lkt-file-entity'; public function getId() :int { return $this->_getIntegerVal('id'); } public function hasId() :bool { return $this->_hasIntegerVal('id'); } /** @return \Lkt\WebPages\LktFileEntity */ public function setId(int $id) { $this->_setIntegerVal('id', $id); return $this; } public function getCreatedAt(): ?\Carbon\Carbon { return $this->_getDateTimeVal('createdAt'); } public function getCreatedAtFormatted(string $format = null) :string { return $this->_getDateTimeFormattedVal('createdAt', $format); } public function getCreatedAtIntlFormatted(string $format = null) :string { return $this->_getDateTimeFormattedIntlVal('createdAt', $format); } public function hasCreatedAt() :bool { return $this->_hasDateTimeVal('createdAt'); } /** @return \Lkt\WebPages\LktFileEntity*/ public function setCreatedAt($createdAt) { $this->_setDateTimeVal('createdAt', $createdAt); return $this; } public function getUpdatedAt(): ?\Carbon\Carbon { return $this->_getDateTimeVal('updatedAt'); } public function getUpdatedAtFormatted(string $format = null) :string { return $this->_getDateTimeFormattedVal('updatedAt', $format); } public function getUpdatedAtIntlFormatted(string $format = null) :string { return $this->_getDateTimeFormattedIntlVal('updatedAt', $format); } public function hasUpdatedAt() :bool { return $this->_hasDateTimeVal('updatedAt'); } /** @return \Lkt\WebPages\LktFileEntity*/ public function setUpdatedAt($updatedAt) { $this->_setDateTimeVal('updatedAt', $updatedAt); return $this; } public function getType() :string { return $this->_getStringChoiceVal('type'); } public function hasType() :bool { return $this->_hasStringChoiceVal('type'); } public function hasTypeIn(array $values) :bool { return $this->_stringChoiceIn('type', $values); } public function typeIs(string $value) :bool { return $this->_stringChoiceEqual('type', $value); } /** @return \Lkt\WebPages\LktFileEntity */ public function setType(string $type) { $this->_setStringChoiceVal('type', $type); return $this; } public function typeIsUnit() :bool { return $this->_getStringChoiceVal('type') === 'unit'; } /** @return \Lkt\WebPages\LktFileEntity*/ public function setTypeUnit() { $this->_setStringChoiceVal('type', 'unit'); return $this; } public function typeIsDir() :bool { return $this->_getStringChoiceVal('type') === 'dir'; } /** @return \Lkt\WebPages\LktFileEntity*/ public function setTypeDir() { $this->_setStringChoiceVal('type', 'dir'); return $this; } public function typeIsImg() :bool { return $this->_getStringChoiceVal('type') === 'img'; } /** @return \Lkt\WebPages\LktFileEntity*/ public function setTypeImg() { $this->_setStringChoiceVal('type', 'img'); return $this; } public function typeIsVid() :bool { return $this->_getStringChoiceVal('type') === 'vid'; } /** @return \Lkt\WebPages\LktFileEntity*/ public function setTypeVid() { $this->_setStringChoiceVal('type', 'vid'); return $this; } public function typeIsFile() :bool { return $this->_getStringChoiceVal('type') === 'file'; } /** @return \Lkt\WebPages\LktFileEntity*/ public function setTypeFile() { $this->_setStringChoiceVal('type', 'file'); return $this; } public function getSrc() :string { return $this->_getStringVal('src'); } public function hasSrc() :bool { return $this->_hasStringVal('src'); } /** @return \Lkt\WebPages\LktFileEntity */ public function setSrc(string $src) { $this->_setStringVal('src', $src); return $this; } public function getConfig() :?array { return $this->_getJsonVal('config'); } /** @return \Lkt\WebPages\LktFileEntity*/ public function setConfig(array $config) { $this->_setJsonVal('config', $config); return $this; } public function hasConfig() :bool { return $this->_hasJsonVal('config'); } public function getChildren(): string { return $this->_getForeignListVal('children'); } public function hasChildren() :bool { return $this->_hasForeignListVal('children'); } /** @return \Lkt\WebPages\LktFileEntity*/ public function setChildren($children) { $this->_setForeignListVal('children', $children); return $this; } /** @return \Lkt\WebPages\LktFileEntity*/ public function removeChildrenIds(array $ids) { $this->_removeForeignListIds('children', $ids); return $this; } /** @return \Lkt\WebPages\LktFileEntity[]*/ public function getChildrenData() :array { return $this->_getForeignListData('children'); } public function getChildrenIds() :array { return $this->_getForeignListIds('children'); } /** * @return \Lkt\WebPages\LktFileEntity[] */ public static function getMany(Query $builder = null): array { /** @var \Lkt\WebPages\LktFileEntity[] */ $r = parent::getMany($builder); return $r; } /** * @return \Lkt\WebPages\LktFileEntity|null */ public static function getOne(Query $builder = null) { /** @var \Lkt\WebPages\LktFileEntity */ $r = parent::getOne($builder); return $r; } /** @return \Lkt\WebPages\Generated\LktFileEntityQueryBuilder */ public static function getQueryCaller() { /** * @var \Lkt\WebPages\Generated\LktFileEntityQueryBuilder $builder */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE); return $builder; } /** @return \Lkt\WebPages\Generated\LktFileEntityQueryBuilder */ public static function getFilteredQueryCaller(array $data, array $processRules = null, array $filterRules = null) { /** * @var \Lkt\WebPages\Generated\LktFileEntityQueryBuilder $caller */ list($builder) = Instantiator::getCustomQueryCaller(static::GENERATED_TYPE, $data, $processRules, $filterRules); return $builder; } /** * @return \Lkt\WebPages\LktFileEntity[] */ public static function getPage(int $page, Query $builder = null): array { /** @var \Lkt\WebPages\LktFileEntity[] */ $r = parent::getPage($page, $builder); return $r; } }