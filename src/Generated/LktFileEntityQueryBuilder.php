<?php  namespace Lkt\FileBrowser\Generated; use Lkt\QueryBuilding\Query; use Lkt\QueryBuilding\DateIntervals\AbstractInterval; use Lkt\Factory\Instantiator\Instantiator; use Lkt\Factory\Schemas\Schema; class LktFileEntityQueryBuilder extends Query { const COMPONENT = 'lkt-file-entity'; /** @return \Lkt\FileBrowser\Generated\LktFileEntityQueryBuilder */ public static function getCaller() { $schema = Schema::get(static::COMPONENT); /** @var \Lkt\FileBrowser\Generated\LktFileEntityQueryBuilder $r */ $r = static::table($schema->getTable()); Instantiator::prepareQueryCaller(static::COMPONENT, $r); return $r; } public function andIdEqual(int $value) { return $this->andIntegerEqual('id', $value); } public function andIdNot(int $value) { return $this->andIntegerNot('id', $value); } public function andIdGreaterThan(int $value) { return $this->andIntegerGreaterThan('id', $value); } public function andIdGreaterOrEqualThan(int $value) { return $this->andIntegerGreaterOrEqualThan('id', $value); } public function andIdLowerThan(int $value) { return $this->andIntegerLowerThan('id', $value); } public function andIdLowerOrEqualThan(int $value) { return $this->andIntegerLowerOrEqualThan('id', $value); } public function andIdBetween(int $from, int $to) { return $this->andIntegerBetween('id', $from, $to); } public function andIdIn(array $values) { return $this->andIntegerIn('id', $values); } public function andIdNotIn(array $values) { return $this->andIntegerNotIn('id', $values); } public function andIdEqualToField(string $component, string $field ) { return $this->andFieldEqualToField('id', $component, $field); } public function orIdEqual(int $value) { return $this->orIntegerEqual('id', $value); } public function orIdNot(int $value) { return $this->orIntegerNot('id', $value); } public function orIdGreaterThan(int $value) { return $this->orIntegerGreaterThan('id', $value); } public function orIdGreaterOrEqualThan(int $value) { return $this->orIntegerGreaterOrEqualThan('id', $value); } public function orIdLowerThan(int $value) { return $this->orIntegerLowerThan('id', $value); } public function orIdLowerOrEqualThan(int $value) { return $this->orIntegerLowerOrEqualThan('id', $value); } public function orIdBetween(int $from, int $to) { return $this->orIntegerBetween('id', $from, $to); } public function orIdIn(array $values) { return $this->orIntegerIn('id', $values); } public function orIdNotIn(array $values) { return $this->orIntegerNotIn('id', $values); } public function orIdEqualToField(string $component, string $field ) { return $this->orFieldEqualToField('id', $component, $field); } public function andCreatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('created_at', $from, $to); } public function andCreatedAtEqual(string $value) { return $this->andDatetimeEqual('created_at', $value); } public function andCreatedAtNot(string $value) { return $this->andDatetimeNot('created_at', $value); } public function andCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function andCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function andCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('created_at', $value, $interval); } public function andCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('created_at', $interval); } public function andCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function andCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('created_at', $interval); } public function andCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('created_at', $value, $interval); } public function andCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('created_at', $interval); } public function andCreatedAtLike(string $value) { return $this->andDatetimeLike('created_at', $value); } public function andCreatedAtNotLike(string $value) { return $this->andDatetimeNotLike('created_at', $value); } public function andCreatedAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('created_at', $value); } public function andCreatedAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('created_at', $value); } public function andCreatedAtEndsLike(string $value) { return $this->andDatetimeEndsLike('created_at', $value); } public function andCreatedAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('created_at', $value); } public function orCreatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('created_at', $from, $to); } public function orCreatedAtEqual(string $value) { return $this->orDatetimeEqual('created_at', $value); } public function orCreatedAtNot(string $value) { return $this->orDatetimeNot('created_at', $value); } public function orCreatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('created_at', $value, $interval); } public function orCreatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('created_at', $interval); } public function orCreatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('created_at', $value, $interval); } public function orCreatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('created_at', $interval); } public function orCreatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('created_at', $value, $interval); } public function orCreatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('created_at', $interval); } public function orCreatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('created_at', $value, $interval); } public function orCreatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('created_at', $interval); } public function orCreatedAtLike(string $value) { return $this->orDatetimeLike('created_at', $value); } public function orCreatedAtNotLike(string $value) { return $this->orDatetimeNotLike('created_at', $value); } public function orCreatedAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('created_at', $value); } public function orCreatedAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('created_at', $value); } public function orCreatedAtEndsLike(string $value) { return $this->orDatetimeEndsLike('created_at', $value); } public function orCreatedAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('created_at', $value); } public function andUpdatedAtBetween(string $from, string $to) { return $this->andDatetimeBetween('updated_at', $from, $to); } public function andUpdatedAtEqual(string $value) { return $this->andDatetimeEqual('updated_at', $value); } public function andUpdatedAtNot(string $value) { return $this->andDatetimeNot('updated_at', $value); } public function andUpdatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThan('updated_at', $value, $interval); } public function andUpdatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterOrEqualThanNow('updated_at', $interval); } public function andUpdatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeGreaterThan('updated_at', $value, $interval); } public function andUpdatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->andDatetimeGreaterThanNow('updated_at', $interval); } public function andUpdatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThan('updated_at', $value, $interval); } public function andUpdatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerOrEqualThanNow('updated_at', $interval); } public function andUpdatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->andDatetimeLowerThan('updated_at', $value, $interval); } public function andUpdatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->andDatetimeLowerThanNow('updated_at', $interval); } public function andUpdatedAtLike(string $value) { return $this->andDatetimeLike('updated_at', $value); } public function andUpdatedAtNotLike(string $value) { return $this->andDatetimeNotLike('updated_at', $value); } public function andUpdatedAtBeginsLike(string $value) { return $this->andDatetimeBeginsLike('updated_at', $value); } public function andUpdatedAtNotBeginsLike(string $value) { return $this->andDatetimeNotBeginsLike('updated_at', $value); } public function andUpdatedAtEndsLike(string $value) { return $this->andDatetimeEndsLike('updated_at', $value); } public function andUpdatedAtNotEndsLike(string $value) { return $this->andDatetimeNotEndsLike('updated_at', $value); } public function orUpdatedAtBetween(string $from, string $to) { return $this->orDatetimeBetween('updated_at', $from, $to); } public function orUpdatedAtEqual(string $value) { return $this->orDatetimeEqual('updated_at', $value); } public function orUpdatedAtNot(string $value) { return $this->orDatetimeNot('updated_at', $value); } public function orUpdatedAtGreaterOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThan('updated_at', $value, $interval); } public function orUpdatedAtGreaterOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterOrEqualThanNow('updated_at', $interval); } public function orUpdatedAtGreaterThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeGreaterThan('updated_at', $value, $interval); } public function orUpdatedAtGreaterThanNow(AbstractInterval $interval = null) { return $this->orDatetimeGreaterThanNow('updated_at', $interval); } public function orUpdatedAtLowerOrEqualThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThan('updated_at', $value, $interval); } public function orUpdatedAtLowerOrEqualThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerOrEqualThanNow('updated_at', $interval); } public function orUpdatedAtLowerThan(string $value, AbstractInterval $interval = null) { return $this->orDatetimeLowerThan('updated_at', $value, $interval); } public function orUpdatedAtLowerThanNow(AbstractInterval $interval = null) { return $this->orDatetimeLowerThanNow('updated_at', $interval); } public function orUpdatedAtLike(string $value) { return $this->orDatetimeLike('updated_at', $value); } public function orUpdatedAtNotLike(string $value) { return $this->orDatetimeNotLike('updated_at', $value); } public function orUpdatedAtBeginsLike(string $value) { return $this->orDatetimeBeginsLike('updated_at', $value); } public function orUpdatedAtNotBeginsLike(string $value) { return $this->orDatetimeNotBeginsLike('updated_at', $value); } public function orUpdatedAtEndsLike(string $value) { return $this->orDatetimeEndsLike('updated_at', $value); } public function orUpdatedAtNotEndsLike(string $value) { return $this->orDatetimeNotEndsLike('updated_at', $value); } public function andTypeEqual(string $value) { return $this->andStringEqual('type', $value); } public function andTypeNot(string $value) { return $this->andStringNot('type', $value); } public function andTypeLike(string $value) { return $this->andStringLike('type', $value); } public function andTypeNotLike(string $value) { return $this->andStringNotLike('type', $value); } public function andTypeBeginsLike(string $value) { return $this->andStringBeginsLike('type', $value); } public function andTypeNotBeginsLike(string $value) { return $this->andStringNotBeginsLike('type', $value); } public function andTypeEndsLike(string $value) { return $this->andStringEndsLike('type', $value); } public function andTypeNotEndsLike(string $value) { return $this->andStringNotEndsLike('type', $value); } public function andTypeIn(array $values) { return $this->andStringIn('type', $values); } public function andTypeNotIn(array $values) { return $this->andStringNotIn('type', $values); } public function andTypeIsUnit() { return $this->andStringEqual('type', 'unit'); } public function andTypeIsNotUnit() { return $this->andStringNot('type', 'unit'); } public function andTypeIsDir() { return $this->andStringEqual('type', 'dir'); } public function andTypeIsNotDir() { return $this->andStringNot('type', 'dir'); } public function andTypeIsImg() { return $this->andStringEqual('type', 'img'); } public function andTypeIsNotImg() { return $this->andStringNot('type', 'img'); } public function andTypeIsVid() { return $this->andStringEqual('type', 'vid'); } public function andTypeIsNotVid() { return $this->andStringNot('type', 'vid'); } public function andTypeIsFile() { return $this->andStringEqual('type', 'file'); } public function andTypeIsNotFile() { return $this->andStringNot('type', 'file'); } public function orTypeEqual(string $value) { return $this->orStringEqual('type', $value); } public function orTypeNot(string $value) { return $this->orStringNot('type', $value); } public function orTypeLike(string $value) { return $this->orStringLike('type', $value); } public function orTypeNotLike(string $value) { return $this->orStringNotLike('type', $value); } public function orTypeBeginsLike(string $value) { return $this->orStringBeginsLike('type', $value); } public function orTypeNotBeginsLike(string $value) { return $this->orStringNotBeginsLike('type', $value); } public function orTypeEndsLike(string $value) { return $this->orStringEndsLike('type', $value); } public function orTypeNotEndsLike(string $value) { return $this->orStringNotEndsLike('type', $value); } public function orTypeIn(array $values) { return $this->orStringIn('type', $values); } public function orTypeNotIn(array $values) { return $this->orStringNotIn('type', $values); } public function orTypeIsUnit() { return $this->orStringEqual('type', 'unit'); } public function orTypeIsNotUnit() { return $this->orStringNot('type', 'unit'); } public function orTypeIsDir() { return $this->orStringEqual('type', 'dir'); } public function orTypeIsNotDir() { return $this->orStringNot('type', 'dir'); } public function orTypeIsImg() { return $this->orStringEqual('type', 'img'); } public function orTypeIsNotImg() { return $this->orStringNot('type', 'img'); } public function orTypeIsVid() { return $this->orStringEqual('type', 'vid'); } public function orTypeIsNotVid() { return $this->orStringNot('type', 'vid'); } public function orTypeIsFile() { return $this->orStringEqual('type', 'file'); } public function orTypeIsNotFile() { return $this->orStringNot('type', 'file'); } public function andChildrenContains($value) { return $this->andForeignKeysContains('children', $value); } public function orChildrenContains($value) { return $this->orForeignKeysContains('children', $value); } public function andNameEqual(string $value) { return $this->andi18nStringEqual('name', $value); } public function andNameNot(string $value) { return $this->andi18nStringNot('name', $value); } public function andNameLike(string $value) { return $this->andi18nStringLike('name', $value); } public function andNameNotLike(string $value) { return $this->andi18nStringNotLike('name', $value); } public function andNameBeginsLike(string $value) { return $this->andi18nStringBeginsLike('name', $value); } public function andNameNotBeginsLike(string $value) { return $this->andi18nStringNotBeginsLike('name', $value); } public function andNameEndsLike(string $value) { return $this->andi18nStringEndsLike('name', $value); } public function andNameNotEndsLike(string $value) { return $this->andi18nStringNotEndsLike('name', $value); } public function andNameIn(array $values) { return $this->andi18nStringIn('name', $values); } public function andNameNotIn(array $values) { return $this->andi18nStringNotIn('name', $values); } public function orNameEqual(string $value) { return $this->ori18nStringEqual('name', $value); } public function orNameNot(string $value) { return $this->ori18nStringNot('name', $value); } public function orNameLike(string $value) { return $this->ori18nStringLike('name', $value); } public function orNameNotLike(string $value) { return $this->ori18nStringNotLike('name', $value); } public function orNameBeginsLike(string $value) { return $this->ori18nStringBeginsLike('name', $value); } public function orNameNotBeginsLike(string $value) { return $this->ori18nStringNotBeginsLike('name', $value); } public function orNameEndsLike(string $value) { return $this->ori18nStringEndsLike('name', $value); } public function orNameNotEndsLike(string $value) { return $this->ori18nStringNotEndsLike('name', $value); } public function orNameIn(array $values) { return $this->ori18nStringIn('name', $values); } public function orNameNotIn(array $values) { return $this->ori18nStringNotIn('name', $values); } }